def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:
        if not colors or not queries:
            return []
        
        maps = {}
        for i, v in enumerate(colors):
            if not v in maps:
                maps[v] = []
            maps[v].append(i)
        
        ans = []
        for i, c in queries:
            if c in maps:
                ans.append(self.search(i, maps[c]))
            else:
                ans.append(-1)

        return ans
    
    def search(self, target, interval):
        diff = float('inf')
        left = 0
        right = len(interval)-1

        while left <= right:
            mid = left + (right-left)//2
            midV = interval[mid]
            diff = min(diff, abs(target-midV))

            if midV == target:
                diff = 0
                break
            if midV > target:
                right = mid - 1
            else:
                left = mid + 1
        return diff


